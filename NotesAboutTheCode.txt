

If your code is not running as you expect, here may be some possible fixed:
[1] FFmpeg:
    The movie() - function from the py-pde module requires that
    "FFmpeg" is installed and added to the system PATH environment variable.
    (Internally the Movie class uses matplotlib.animation.FFMpegWriter., and its needs
    to be added to PATH so that matplotlib can find it.)
    To install it on Windows, you may follow the guide provided here:
    https://www.wikihow.com/Install-FFmpeg-on-Windows

[2] Python:
    In Plot3d.py, near the top, we have the line:  matplotlib.use('QtAgg')
    This may not work unless you have PyQt6 installed. There are two possible fixes:
    (1) Change backend: You may e.g. try to replace the line by matplotlib.use('TkAgg') or matplotlib.use('GTKAgg')
    This should work because Tkinter comes with python by default.
    (2) Alternatively, you can download PyQt6 from: https://www.riverbankcomputing.com/static/Docs/PyQt6/installation.html
    (3), or another python backend, see: https://matplotlib.org/stable/users/explain/backends.html

NeuroEquation2d.py:
    -Solves the equation in the 2D case.
    - Code uses a modified version of:
    https://py-pde.readthedocs.io/en/latest/examples_gallery/pde_brusselator_class.html#sphx-glr-examples-gallery-pde-brusselator-class-py
    # Todo: We need to update the script with the correct parameter values(eta, eta_A, epsilon, epsilon_A)
    # Todo: Update this script with the correct domain dimensions (done in the grid object, and in the initial values
    for the scalar fields for N and R)
    >>> SCRIPT DEPRECATED: NeuroEq2D.py is used instead (!!!)

NeuroEquation3d.py:
    >>> Solves the equation in the 3D case.
    >>> Code uses a modified version of:
    https://py-pde.readthedocs.io/en/latest/examples_gallery/pde_brusselator_class.html#sphx-glr-examples-gallery-pde-brusselator-class-py


    >>> If you want to see the initial values of the grid, put the stuff below directly
    >>> after system_state = eq.get_initial_state(grid) (line 151)
    # Todo: Begin debug.
    points_per_dim = [math.gcd(*num_gridpoints), 'all'][1]
    plotter = Plotter3D(length=num_gridpoints[0], width=num_gridpoints[1], height=num_gridpoints[2],
                        data_shape=num_gridpoints, points_per_dim=points_per_dim)
    plotter.save_plot(c_n=system_state.data[0], c_r=system_state.data[1], c_rn=system_state.data[2], time=0,
                      filename=f'debugplot{give_sortable_name(round(time_max_dimless / dt_dimless), 0)}',
                      rotate=0, elevate=False)
    exit()
    # Todo: End debug.

